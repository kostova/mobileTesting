function ReverseHandshakeState1(a,b){this.sharedKey=a,this.sendResponse=b}function HandshakeRejectedState(){}function ReverseIdleState(a){this.sharedKey=a}function SuspendState(a,b){this.sharedKey=a,this.retryCount=0,this.providerTimeout=null,this.dropped=!1,this.stopClient=b}var ElevatedState=require("./AutomationState.js").ElevatedState,automationMessageFactory=require("./automationMessageFactory.js"),logger=require("./logger.js"),TSProtocol=require("./TsAutomationProtocol.js"),validation=require("./Validation.js");ReverseHandshakeState1.prototype=new ElevatedState,ReverseHandshakeState1.prototype.beginState=function(a){a.start()},ReverseHandshakeState1.prototype.onConnected=function(a){var b=automationMessageFactory.messageToIdWithPayload(TSProtocol.serverId,{handshake:TSProtocol.messages.HS_GET_CLIENT_INFO,serverVersion:TSProtocol.version});return a.sendAutomationMessage(b),this},ReverseHandshakeState1.prototype.handleMessage=function(a,b){if(!validation.validateHandshakeResponse(b))return a.sendAutomationMessage(automationMessageFactory.messageToIdWithPayload(TSProtocol.serverId,automationMessageFactory.errorPayloadWithError(validation.getError()))),new HandshakeRejectedState;this.machine.setVersion(parseInt(b.data.version)),this.machine.setPlatformInfo(b.data.platformInfo),this.machine.setCapabilities(b.data.capabilities),b.data.identity.sharedKey=this.sharedKey,this.machine.setIdentity(b.data.identity);var c=automationMessageFactory.messageToIdWithPayload(TSProtocol.serverId,{handshake:TSProtocol.messages.HS_ACCEPTED,id:this.machine.getUUID()});return a.sendAutomationMessage(c),this.sendResponse&&this.sendResponse(automationMessageFactory.successPayloadWithReason("Connection established.")),new ReverseIdleState(this.sharedKey)},ReverseHandshakeState1.prototype.onClosed=function(){return this.sendResponse&&this.sendResponse(automationMessageFactory.failurePayloadWithReason("Unable to connect to device.")),new HandshakeRejectedState},HandshakeRejectedState.prototype=new ElevatedState,HandshakeRejectedState.prototype.beginState=function(){this.machine.emit("rejected",this.machine)},ReverseIdleState.prototype=new ElevatedState,ReverseIdleState.prototype.beginState=function(){this.machine.emit("connected",this.machine);var a=this.machine.server.getClientsWithCapabilities(this.machine,[TSProtocol.capabilities.AUTOMATION_TEST_RUNNER]),b=automationMessageFactory.getAgentAddedPayload(this.machine.getUUID(),this.machine.getPlatformInfo(),this.machine.getCapabilities());this.machine.server.broadcastPayload(this.machine,a,b)},ReverseIdleState.prototype.handleMessage=function(a,b,c){if(!validation.validateIncomingAutomationMessage(b))return a.sendAutomationMessage(b.generateResponseFromIdWithPayload(TSProtocol.serverId,automationMessageFactory.errorPayloadWithError(validation.getError()))),this;if(b.toId===TSProtocol.serverId){if("suspend"===b.data.cmd)return new SuspendState(this.sharedKey,!1);logger.debug("Unhandled command received from client.")}else b.fromId=this.machine.getUUID(),this.machine.server.routeMessage(this.machine,b,c);return this},ReverseIdleState.prototype.routeMessage=function(a,b){return 2!=this.machine.getVersion()||"ios.launch"!==b.data.cmd&&"coreApi.endExecution"!==b.data.cmd?(a.sendAutomationMessage(b),this):(a.sendAutomationMessage(b),new SuspendState(this.sharedKey,!1))},ReverseIdleState.prototype.onClosed=function(){var a=this.machine.server.getClientsWithCapabilities(this.machine,[TSProtocol.capabilities.AUTOMATION_TEST_RUNNER]),b=automationMessageFactory.getAgentRemovedPayload(this.machine.getUUID());this.machine.server.broadcastPayload(this.machine,a,b),this.machine.emit("disconnected",this.machine)},SuspendState.prototype=new ElevatedState,SuspendState.prototype.beginState=function(){this.stopClient&&this.machine.stop(!1)},SuspendState.prototype.onConnected=function(a){var b=automationMessageFactory.messageToIdWithPayload(TSProtocol.serverId,{handshake:TSProtocol.messages.HS_GET_CLIENT_INFO,serverVersion:TSProtocol.version,isResuming:!0});a.sendAutomationMessage(b)},SuspendState.prototype.handleMessage=function(a,b){if(!validation.validateHandshakeResponse(b))return a.sendAutomationMessage(automationMessageFactory.messageToIdWithPayload(TSProtocol.serverId,automationMessageFactory.errorPayloadWithError(validation.getError()))),this;this.machine.setPlatformInfo(b.data.platformInfo),this.machine.setCapabilities(b.data.capabilities),b.data.identity.sharedKey=this.sharedKey,this.machine.setIdentity(b.data.identity);var c=automationMessageFactory.messageToIdWithPayload(TSProtocol.serverId,{handshake:TSProtocol.messages.HS_ACCEPTED,id:this.machine.getUUID()});return a.sendAutomationMessage(c),this.machine.resume(this.machine),new ReverseIdleState(this.sharedKey)},SuspendState.prototype.routeMessage=function(a,b,c){return c(automationMessageFactory.errorPayloadWithError(TSProtocol.errors.RECIPIENT_NOT_AVAILABLE)),this},SuspendState.prototype.onClosed=function(a){return this.dropped?this:(this.retryCount<=0&&this.machine.suspend(),this.retryCount++,this.providerTimeout=setTimeout(function(){logger.debug("Handshake unsuccessful... Retry attempt: "+this.retryCount),a.start()}.bind(this),100),this)},SuspendState.prototype.onSuspended=function(){var a=this.machine.server.getClientsWithCapabilities(this.machine,[TSProtocol.capabilities.AUTOMATION_TEST_RUNNER]),b=automationMessageFactory.getAgentRemovedPayload(this.machine.getUUID());return this.machine.server.broadcastPayload(this.machine,a,b),this},SuspendState.prototype.onDropped=function(){return this.dropped=!0,clearTimeout(this.providerTimeout),logger.debug("Requesting removal from clients list."),this.machine.emit("disconnected",this.machine),this},module.exports={ReverseHandshakeState1:ReverseHandshakeState1};