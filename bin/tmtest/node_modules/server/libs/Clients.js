/**
 * Clients
 * a dictionary of clients, indexed by sharedKey
 */

var logger = require('./logger.js');

/**
 * Clients constructor
  */
function Clients() {
	this._clients = { };
	// _clients is a dictionary of clients, indexed by sharedKey
	// {
	// 		sharedKey1:{
	// 			clientId: { /* client */ },
	// 			clientId2: { /* client */ },
	// 			clientId3: { /* client */ },
	// 		},
	// 		sharedKey2:{
	// 			clientId: { /* client */ },
	// 			clientId2: { /* client */ },
	// 			clientId3: { /* client */ },
	// 		}
	// }
}

Clients.prototype.add = function(client) {
	if(!client._id || !client._identity.sharedKey || !client._capabilities.length) {
		throw "Invalid Client";
	}

	if(!(client.getIdentity().sharedKey in this._clients)){
		logger.debug("creating sharedKey "+ client.getIdentity().sharedKey);
		this._clients[client.getIdentity().sharedKey] = {};
	}

	logger.debug("adding "+ client.getId() +" to sharedKey "+ client.getIdentity().sharedKey);
	this._clients[client.getIdentity().sharedKey][client.getId()] = client;	
}

Clients.prototype.remove = function(sharedKey, id){

	if(this._clients[sharedKey] && this._clients[sharedKey][id]) {
		logger.debug("removing "+ id);
		delete this._clients[sharedKey][id];
	}
}

Clients.prototype.getByCapability = function(sharedKey, capabilities) {
	var clientsByCapability = [],
		thisClient,
		capable;

	if(!capabilities){
		return clientsByCapability;
	}

	for(var i in this._clients[sharedKey]){
		thisClient = this._clients[sharedKey][i];
		capable = true;

		for(var j in capabilities){
			if(thisClient.getCapabilities().indexOf(capabilities[j]) === -1){
				capable = false;
				break;
			}
		}

		if(capable && thisClient._status === thisClient.statuses.CONNECTED){
			clientsByCapability.push(thisClient);
		}
	}

	return clientsByCapability;
}

Clients.prototype.getById = function(sharedKey, id){
	// TODO - return only connected clients?
	if(this._clients[sharedKey]) {
		return this._clients[sharedKey][id];
	}
}

module.exports = Clients;