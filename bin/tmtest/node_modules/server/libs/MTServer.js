function MTServer(a,b,c){this._port=a,this._messageTimeout=b,this._connectionTimeout=c,this._wsListener=null,this._handlers={connectionCreated:this.handleConnectionCreated.bind(this),connectionRejected:this.handleConnectionRejected.bind(this),connectionAccepted:this.handleConnectionAccepted.bind(this),connectionDisconnected:this.handleConnectionDisconnected.bind(this)},this._delegateMethods={getConnectionWithUUID:this.getConnectionWithUUID.bind(this),getClientsWithCapabilities:this.getClientsWithCapabilities.bind(this),routeMessage:this.routeMessage.bind(this),startConnection:this.startConnection.bind(this),broadcastPayload:this.broadcastPayload.bind(this),getConnectionTimeout:this.getConnectionTimeout.bind(this),getMessageTimeout:this.getMessageTimeout.bind(this)},this._pendingConnections=[],this._activeConnections={}}var WebSocketListener=require("./WebSocketListener.js"),Connection=require("./Connection.js").Connection,logger=require("./logger.js"),automationMessageFactory=require("./automationMessageFactory.js"),TSProtocol=require("./TsAutomationProtocol.js");MTServer.prototype.start=function(a){this._wsListener=a?a:new WebSocketListener(this._port),this._wsListener.on("connectionCreated",this._handlers.connectionCreated),this._wsListener.start()},MTServer.prototype.shutdown=function(){this._wsListener.removeListener("connectionCreated",this._handlers.connectionCreated),this._wsListener.stop()},MTServer.prototype.removeConnectionListeners=function(a){a.removeListener("rejected",this._handlers.connectionRejected),a.removeListener("connected",this._handlers.connectionAccepted),a.removeListener("disconnected",this._handlers.connectionDisconnected)},MTServer.prototype.handleConnectionCreated=function(a){a.on("rejected",this._handlers.connectionRejected),a.on("connected",this._handlers.connectionAccepted),a.on("disconnected",this._handlers.connectionDisconnected),a.server=this._delegateMethods,logger.debug("Starting connection..."),this._pendingConnections.push(a),a.start()},MTServer.prototype.handleConnectionRejected=function(a){this.removeConnectionListeners(a);var b=this._pendingConnections.indexOf(a);b>-1&&this._pendingConnections.splice(b,1),logger.debug("Connection rejected...")},MTServer.prototype.handleConnectionAccepted=function(a){var b=this._pendingConnections.indexOf(a);b>-1&&this._pendingConnections.splice(b,1);var c=a.getIdentity().sharedKey,d=a.getUUID();this._activeConnections[c]||(this._activeConnections[c]={}),this._activeConnections[c][d]=a;for(d in this._activeConnections[a.getIdentity().sharedKey])if(this._activeConnections[a.getIdentity().sharedKey].hasOwnProperty(d)){var e=this._activeConnections[a.getIdentity().sharedKey][d];e.siblingConnected(a)}logger.debug("Client successfully connected...")},MTServer.prototype.handleConnectionDisconnected=function(a){var b;for(b in this._activeConnections[a.getIdentity().sharedKey])if(this._activeConnections[a.getIdentity().sharedKey].hasOwnProperty(b)){var c=this._activeConnections[a.getIdentity().sharedKey][b];c.siblingDisconnected(a)}this.removeConnectionListeners(a);var d=a.getIdentity().sharedKey;b=a.getUUID(),delete this._activeConnections[d][b],0===Object.keys(this._activeConnections[d]).length&&delete this._activeConnections[d],logger.debug("Client disconnected...")},MTServer.prototype.getConnectionWithUUID=function(a,b){return this._activeConnections[a.getIdentity().sharedKey][b]},MTServer.prototype.getClientsWithCapabilities=function(a,b){logger.debug("getClientsWithCapabilities");var c=[],d=a.getIdentity().sharedKey;for(var e in this._activeConnections[d])if(this._activeConnections[d].hasOwnProperty(e)){var f=this._activeConnections[d][e],g=!0;if(f.getIsSuspended())continue;for(var h in b)if(-1===f.getCapabilities().indexOf(b[h])){g=!1;break}g&&c.push(f)}return c},MTServer.prototype.routeMessage=function(a,b,c){var d=a.getIdentity().sharedKey,e=this._activeConnections[d][b.toId];e?e.routeMessage(b,c):c(automationMessageFactory.errorPayloadWithError(TSProtocol.errors.RECIPIENT_NOT_FOUND))},MTServer.prototype.startConnection=function(a){this.handleConnectionCreated(a)},MTServer.prototype.broadcastPayload=function(a,b,c){b.forEach(function(a){a.routeMessage(automationMessageFactory.messageToIdFromIdWithPayload(a.getUUID(),"server",c),function(){})})},MTServer.prototype.getConnectionTimeout=function(){return this._connectionTimeout},MTServer.prototype.getMessageTimeout=function(){return this._messageTimeout},module.exports={Server:MTServer};