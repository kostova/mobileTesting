function stepGetChildren(a){var b=[];"undefined"!=typeof this.operationDefinitions[a.platformInfo.platformKey]?b=this.operationDefinitions[a.platformInfo.platformKey]:"undefined"!=typeof this.operationDefinitions["default"]&&(b=this.operationDefinitions["default"]);var c=[];return b.forEach(function(a){var b=new api.TSNode(ApiProtocol.itemTypes.OPERATION,a.name);b.parent=this,b.operation=a,c.push(b)}),c}function copySuiteWithSubsetOfTests(a,b){var c=new api.TSNode(ApiProtocol.itemTypes.SUITE,a.name);return c.testsByName={},c.stepRepository=a.stepRepository,b.forEach(function(b){var d=a.testsByName[b];if(!d)throw new Error("Requested test, '"+b+"', was not found in suite, '"+a.name+"'.");c.addChild(d),c.testsByName[d.name]=d}),c}function TelerikTesting(){this.agentManager=new AgentManager,this.executionManager=new ExecutionManager,this.consoleReporter=new EMConsoleReporter(this.executionManager),this.executionManager.setBuilder(new EMDefaultResultBuilder),this._testBuilderStack=[],this._suites={},EventEmitter.call(this)}require("./libs/prototypeExtensions").install();var AgentManager=require("./libs/AgentManager.js"),ExecutionManager=require("./libs/ExecutionManager.js"),EMConsoleReporter=require("./libs/EMConsoleReporter.js"),EMDefaultResultBuilder=require("./libs/EMDefaultResultBuilder.js"),WebApi=require("./libs/WebApi.js"),iOSApi=require("./libs/iOSApi.js"),AndroidApi=require("./libs/AndroidApi.js"),WP8Api=require("./libs/WP8Api.js"),CtrlApi=require("./libs/CtrlApi.js"),Assertions=require("./libs/Assertions.js"),RestClient=require("./libs/RestClient.js"),ApiProtocol=require("./libs/ApiProtocol.js"),EventEmitter=require("./libs/EventEmitter.js"),Q=require("./libs/q.js"),api=require("./libs/api.js"),config=require("./libs/config.js"),cpFactory=require("./libs/connectionParamsFactory.js"),ValidateArgument=api.ValidateArgument,ValidateArrayElements=api.ValidateArrayElements,SCOPE_TYPE={SPEC:"SPEC",DESCRIBE:"DESCRIBE",TEST:"TEST",STEP:"STEP"};TelerikTesting.prototype={constructor:TelerikTesting,Q:Q,context:cpFactory.context,version:config.version+"."+config.protocolVersion,api:{web:WebApi,ios:iOSApi,android:AndroidApi,wp8:WP8Api,ctrl:CtrlApi,assert:(new Assertions).assert,restclient:new RestClient},spec:function(a){try{if(0!==this._testBuilderStack.length)throw new Error("An attempt was made to call spec() from an invalid scope.");this._testBuilderStack.push({scopeType:SCOPE_TYPE.SPEC,node:null});try{ValidateArgument(a,"function","specFunc",!1),a()}catch(b){throw b}finally{this._testBuilderStack.pop()}}catch(b){if(0!==this._testBuilderStack.length)throw b;this.emit("error",b)}},describe:function(a,b,c){try{if(0!==this._testBuilderStack.length&&this._testBuilderStack[this._testBuilderStack.length-1].scopeType!==SCOPE_TYPE.SPEC)throw new Error("An attempt was made to call describe() from an invalid scope.");var d;if(ValidateArgument(a,"string","description",!1),ValidateArgument(b,"function","testsFunc",!1),ValidateArgument(c,"object","stepRepository",!0),"undefined"!=typeof this._suites[a])throw new Error('A suite with the description, "'+a+'", already exists.');if(d=new api.TSNode(ApiProtocol.itemTypes.SUITE,a),d.testsByName={},c){if("object"!=typeof c)throw new Error("Invalid parameter was provided for stepRepository. Parameter must be an object.");d.stepRepository=c}else d.stepRepository={};this._testBuilderStack.push({scopeType:SCOPE_TYPE.DESCRIBE,node:d});try{b(),this._suites[a]=d}finally{this._testBuilderStack.pop()}}catch(e){if(e.suite=a,0!==this._testBuilderStack.length)throw e;this.emit("error",e)}},test:function(a,b){try{if(0===this._testBuilderStack.length||this._testBuilderStack[this._testBuilderStack.length-1].scopeType!==SCOPE_TYPE.DESCRIBE)throw new Error("An attempt was made to call test() from an invalid scope.");var c,d=this._testBuilderStack[this._testBuilderStack.length-1].node;if(ValidateArgument(a,"string","name",!1),ValidateArgument(b,"function","stepsFunc",!1),"undefined"!=typeof d.testsByName[a])throw new Error('A test with the name, "'+a+'", already exists in this suite.');c=new api.TSNode(ApiProtocol.itemTypes.TEST,a),this._testBuilderStack.push({scopeType:SCOPE_TYPE.TEST,node:c});try{d.addChild(c),d.testsByName[c.name]=c,b()}finally{this._testBuilderStack.pop()}}catch(e){if(e.test=a,0!==this._testBuilderStack.length)throw e;this.emit("error",e)}},step:function(a,b){try{if(0===this._testBuilderStack.length||this._testBuilderStack[this._testBuilderStack.length-1].scopeType!==SCOPE_TYPE.TEST)throw new Error("An attempt was made to call step() from an invalid scope.");var c=this._testBuilderStack[this._testBuilderStack.length-1].node,d=c.parent;ValidateArgument(a,"string","name",!1),ValidateArgument(b,"function","operationsFunc",!0);var e=new api.TSNode(ApiProtocol.itemTypes.STEP,a);e.operationDefinitions={},e.getChildren=stepGetChildren,this._testBuilderStack.push({scopeType:SCOPE_TYPE.STEP,node:e});try{if(b){var f=b();if(void 0===f)f=[];else if(!Array.isArray(f))throw new Error("Operations should be returned in an array.");e.operationDefinitions={"default":f}}else{if("undefined"==typeof d.stepRepository[a])throw new Error('No step is available in the step repository for name: "'+a+'".');if(null===d.stepRepository[a]||"object"!=typeof d.stepRepository[a])throw new Error('Invalid operation definitions in step repository for name: "'+a+'".');e.operationDefinitions=d.stepRepository[a]}Object.keys(e.operationDefinitions).forEach(function(a){if(!Array.isArray(e.operationDefinitions[a]))throw new Error('Operation definitions should be an array for key, "'+a+'".');e.operationDefinitions[a].forEach(function(b){if(!(b instanceof api.Operation))throw new Error('An invalid object exists in the array of operation definitions for key, "'+a+'".')})}),c.addChild(e)}finally{this._testBuilderStack.pop()}}catch(g){if(g.step=a,0!==this._testBuilderStack.length)throw g;this.emit("error",g)}},clearSuites:function(){this._suites={}},getSuites:function(){var a={};for(var b in this._suites){a[b]=[];for(var c=this._suites[b].getChildren(),d=0;d<c.length;d++)a[b].push(c[d].name)}return a},runSpecificSuitesAndTests:function(a,b,c){var d=[];if(null===a||"object"!=typeof a||Array.isArray(a))throw new Error("Invalid JSON in filter.");for(var e in a){if(null===e||"string"!=typeof e)throw new Error("Invalid JSON in filter.");var f=this._suites[e];if(!f)throw new Error("Requested suite, '"+e+"', was not found.");if(!Array.isArray(a[e]))throw new Error("Invalid JSON in filter for suite, '"+e+"'.");d.push(copySuiteWithSubsetOfTests(f,a[e]))}this.executionManager.executeSuitesOnAgents(d,b,c)},runSuites:function(a,b){this.runSpecificSuitesAndTests(this.getSuites(),a,b)},runSuite:function(a,b,c){var d=[this._suites[a]];this.executionManager.executeSuitesOnAgents(d,b,c)},runTest:function(a,b,c,d){var e=[copySuiteWithSubsetOfTests(this._suites[a],[b])];this.executionManager.executeSuitesOnAgents(e,c,d)},runOperation:function(a,b,c){var d=new api.TSNode(ApiProtocol.itemTypes.OPERATION,a.name);d.operation=a,this.executionManager.executeOperationOnAgent(d,b,c)},cancelExecution:function(){this.executionManager.cancelExecution()}},module.exports={TelerikTesting:TelerikTesting,EMDefaultResultBuilder:EMDefaultResultBuilder};