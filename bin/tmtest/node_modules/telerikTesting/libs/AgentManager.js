function AgentManager(){this._handleMessage=this._handleMessage.bind(this),this.clientConnection=new ClientConnection,this.clientConnection.on("message",this._handleMessage),EventEmitter.call(this)}var Agent=require("./Agent.js"),TsAutomationProtocol=require("./TsAutomationProtocol.js"),ApiProtocol=require("./ApiProtocol.js"),EventEmitter=require("./EventEmitter.js"),ClientConnection=require("./ClientConnection.js"),msgFactory=require("./automationMessageFactory.js"),cpFactory=require("./connectionParamsFactory.js"),config=require("./config.js");AgentManager.prototype={constructor:AgentManager,version:"1.0",clientConnection:null,_handleMessage:function(a){switch(a.data.cmd){case"agentAdded":var b=a.data.params.agent,c=this.createExecutionAgent(b.id,b.platformInfo,b.capabilities);this.emit("agentAdded",c);break;case"agentRemoved":this.emit("agentRemoved",a.data.params.id);break;case"notify.descriptorRecorded":this.emit("notify.descriptorRecorded",a.data.params.descriptor)}},connect:function(a,b,c,d){if(this.clientConnection.isConnected&&d(ApiProtocol.errors.SOCKET_ALREADY_CONNECTED),config.messageServerUrl=a,config.messageTimeout=c,d){var e=function(){d(),this.clientConnection.off("connected",e)}.bind(this);this.clientConnection.on("connected",e)}var f=cpFactory.createParams(a,c);this.clientConnection.start(f.provider,f.startState,b)},disconnect:function(a){if(a){var b=function(){a(),this.clientConnection.off("disconnected",b)}.bind(this);this.clientConnection.on("disconnected",b)}this.clientConnection.stop()},createExecutionAgent:function(a,b,c){return new Agent(this.clientConnection,a,b,c)},_sendCommand:function(a,b){this.clientConnection.sendMessage(a,0,function(a,c){a?a.error&&a.error.code&&a.error.description?b({result:{code:200,reason:"Server error code "+a.error.code+", "+a.error.description}}):b({result:{code:200,reason:"Server error.\n"+JSON.stringify(a,null,"  ")}}):c&&c.result&&c.result.code&&c.result.reason?100===c.result.code?b(null,c):200===c.result.code?b(c,null):b({result:{code:200,reason:"Invalid response received from server."}},null):b({result:{code:200,reason:"Invalid response received from server."}},null)})},getExecutionAgents:function(a){if(this.clientConnection.isConnected||a(ApiProtocol.errors.SOCKET_NOT_CONNECTED,null),this.clientConnection.clientInfo){var b=this.createExecutionAgent(TsAutomationProtocol.serverId,this.clientConnection.clientInfo.data.platformInfo,this.clientConnection.clientInfo.capabilities);a(null,[b])}else{var c=msgFactory.getClientsWithCapabilitiesPayload([TsAutomationProtocol.capabilities.AUTOMATION_EXECUTION_AGENT]),d=msgFactory.messageToIdWithPayload(TsAutomationProtocol.serverId,c),e=function(b,c){if(b)return a(b,null),void 0;var d=[];d=2==this.clientConnection.version?c:c.result.params.clients;var e=[];d.forEach(function(a){var b=this.createExecutionAgent(a.id,a.platformInfo,a.capabilities);e.push(b)}.bind(this)),a(null,e)}.bind(this);2==this.clientConnection.version?this.clientConnection.sendMessage(d,0,e):this._sendCommand(d,e)}},connectToAgent:function(a,b,c,d){this.clientConnection.isConnected||d(ApiProtocol.errors.SOCKET_NOT_CONNECTED);var e=msgFactory.getConnectSocketsServerPayload(a,b,c),f=msgFactory.messageToIdWithPayload(TsAutomationProtocol.serverId,e);this._sendCommand(f,d)},disconnectFromAgents:function(a,b,c){this.clientConnection.isConnected||c(ApiProtocol.errors.SOCKET_NOT_CONNECTED),a&&(a=a.split(","));var d=msgFactory.getDisconnectAgentsPayload(a,b),e=msgFactory.messageToIdWithPayload(TsAutomationProtocol.serverId,d);this._sendCommand(e,c)}},module.exports=AgentManager;