function Assertion(a){this._not=!1,this.assert=this.assert.bind(this);for(var b in matchers)this[b]=wrapAssertion.bind(this,b,a);Object.defineProperty(this,"not",{get:function(){return this._not=!0,this}})}function wrapAssertion(a,b){var c=Array.prototype.slice.call(arguments,1),d=c[1],e=matchers[a].apply(null,c);if(this._not&&(e=!e),!e){var f=assertionError(a,b,d,this._not,c.slice(1));throw f}return e}function englishyMethod(a,b){var c=["to"];return b&&c.push("not"),a=a.replace(/([a-z])([A-Z])/g,"$1 $2").toLowerCase(),/es$/.test(a)?c.push(a.substring(0,a.length-2)):/s$/.test(a)?c.push(a.substring(0,a.length-1)):(c.push("be"),c.push(a)),c.join(" ")}function valueString(a){return"string"==typeof a?'"'+a+'"':JSON.stringify(a)}function assertionError(a,b,c,d,e){var f=["Expected"];return f.push(valueString(b)),f.push(englishyMethod(a,d)),f.push(valueString(c)),{assertionError:{method:a,actual:b,expected:c,params:e,isNot:d,message:f.join(" ")}}}var matchers=require("./AssertionMatchers.js");Assertion.prototype={constructor:Assertion,assert:function(a){return new Assertion(a)}.bind(this)},module.exports=Assertion;