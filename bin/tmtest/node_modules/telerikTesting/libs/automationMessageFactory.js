var TsAutomationProtocol=require("./TsAutomationProtocol.js"),AutomationMessage=require("./AutomationMessage.js"),utils=require("./utils.js"),automationMessageFactory={messageWithJSONString:function(a){try{var b=JSON.parse(a),c=new AutomationMessage(b.id,b.responseToMessageId,b.fromId,b.toId,b.data);return c}catch(d){throw new Error("JSON string is invalid for conversion to an AutomationMessage object.")}},messageToIdWithPayload:function(a,b){return new AutomationMessage(utils.uuid(),null,null,a,b)},messageToIdFromIdWithPayload:function(a,b,c){return new AutomationMessage(utils.uuid(),null,b,a,c)},getClientsWithCapabilitiesPayload:function(a){return{cmd:TsAutomationProtocol.commands.GET_CLIENTS_WITH_CAPABILITY,params:{capabilities:a}}},getConnectSocketsServerPayload:function(a,b,c){return{cmd:TsAutomationProtocol.commands.CONNECT_SOCKETS_SERVER,params:{address:a,sharedKey:b,timeout:c}}},getDisconnectAgentsPayload:function(a,b){return{cmd:TsAutomationProtocol.commands.DISCONNECT_AGENTS,params:{agentIds:a,sharedKey:b}}},getAgentAddedPayload:function(a,b,c){return{cmd:"agentAdded",params:{agent:{id:a,platformInfo:b,capabilities:c}}}},getAgentRemovedPayload:function(a){return{cmd:"agentRemoved",params:{id:a}}},failurePayloadWithReason:function(a){return{result:{code:200,reason:a}}},successPayload:function(){return{result:{code:100,reason:"success"}}},successPayloadWithReason:function(a){return{result:{code:100,reason:a}}},successPayloadWithCustomParams:function(a){return{result:{code:100,reason:"success",params:a}}},errorPayloadWithError:function(a){return{error:a}}};module.exports=automationMessageFactory;