var TsAutomationProtocol=require("./TsAutomationProtocol"),Provider=null,StartState=null,context={current:null,availableContexts:{NETWORK:"NETWORK",USB:"USB"},change:function(a){switch(a){case context.availableContexts.NETWORK:Provider=require("./WebSocketClientProvider.js"),StartState=function(){var a=require("./AutomationStates.js").NormalHandshakeStart;return new a([TsAutomationProtocol.capabilities.AUTOMATION_TEST_RUNNER])};break;case context.availableContexts.USB:Provider=require("./NetSocketClientProvider.js"),StartState=function(){var a=require("./AutomationStates.js").ReverseHandshakeStart;return new a(!1)};break;default:throw new Error("Unknown connectionFactory context")}context.current=a}},connectionParamsFactory={context:context,createParams:function(a,b){return{provider:new Provider(a,b),startState:StartState()}}};context.change(context.availableContexts.NETWORK),module.exports=connectionParamsFactory;