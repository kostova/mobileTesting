#!/usr/bin/env node
function UpdateCmdArgs(a){"object"==typeof a&&(cmdArgs=a)}function ValidateNumber(a){return isNaN(a)&&console.log("Argument '"+a+"' must be a number"),parseInt(a)}function ValidateCmdArgs(a){return!a.publish||a.projectId&&a.apiKey?!0:(console.log("'--publish' requires '--project-id' and '--api-key' to be set"),!1)}console.warn=function(){};var cli=require("commander"),argsMng=require("./libs/argumentManager"),moduleVersion="2.5.0.3",cmd,cmdArgs={};cli.version(moduleVersion,"--version").option("-a, --agents <ids>","comma delimited list of agent ids").option("-s, --specs-path <path>","path to folder containing spec files").option("-m, --matcher <matcher>","a regEx expression for matching filename(s). eg: w*Spec.js").option("--suites <names>","comma delimited list of descriptions of suites to run").option("-f, --files <names>","comma delimited list of spec filenames to load").option("--filter <filename>","Suites, and tests to run. eg: {'suiteName':['testName',...],...}").option("-q, --quiet","do not display test results").option("-o, --output-file <filename>","save results in specified file").option("--screenshots <folder>","folder to save screenshots in").option("--screenshots-mode <mode>","all-ops, failed-ops, screenshot-ops (default)").option("--disable-color","disable color coding of results").option("--allow-console-log","allow console.log output to console").option("-c, --config [path]","path and name of config file").option("--save [filename]","creates config file using current settings").option("--sockets-server-address <address>","sockets address of the app under test. eg: host:port").option("--message-server-url <url>","url of the message server. eg: ws://host:port").option("--message-timeout <timeout>","time-to-live in ms for messages",ValidateNumber),cli.command("getagents").description("retrieve a list of connected agents").option("-c, --config [path]","path and name of config file").option("--save [filename]","creates config file using current settings").option("--message-server-url <url>","url of the message server. eg: ws://host:port").action(function(a){UpdateCmdArgs(a),cmd=require("./libs/executionCmds.js").getAgents}),cli.command("getsuites").description("retrieve a list of suites in spec files").option("-s, --specs-path <path>","path to folder containing spec files").option("-m, --matcher <matcher>","a regEx expression for matching filename(s). eg: w*Spec.js").option("-f, --files <names>","comma delimited list of spec filenames to load").option("-c, --config [path]","path and name of config file").option("--save [filename]","creates config file using current settings").option("--message-server-url <url>","url of the message server. eg: ws://host:port").action(function(a){UpdateCmdArgs(a),cmd=require("./libs/executionCmds.js").getSuites}),cli.command("connect").description("connect the server to an agent").option("-c, --config [path]","path and name of config file").option("--save [filename]","creates config file using current settings").option("--message-server-url <url>","url of the message server. eg: ws://host:port").option("--address <address>","sockets address of the app under test. eg: host:port").action(function(a){UpdateCmdArgs(a),cmd=require("./libs/executionCmds.js").connectToAgent}),cli.command("disconnect").description("disconnect agent(s) from the server").option("-c, --config [path]","path and name of config file").option("--save [filename]","creates config file using current settings").option("--message-server-url <url>","url of the message server. eg: ws://host:port").option("-a, --agents <ids>","comma delimited list of agent ids").action(function(a){UpdateCmdArgs(a),cmd=require("./libs/executionCmds.js").disconnectFromAgents}),cli.command("server").description("launch the tmtest message server").option("--message-server-port <port num>","port number to use for message server",ValidateNumber).option("--test-runner-port <port num>","port number to use for test runner",ValidateNumber).option("--message-timeout <ms>","time-to-live for messages",ValidateNumber).option("--launch-test-runner","launch the html test runner").option("-v, --verbose","enable verbose console logging").option("--config <path>","path and name of config file").option("--save [filename]","creates config file using current settings").action(function(a){UpdateCmdArgs(a),cmd=require("./libs/serverCmd.js")}),cli.command("launch").description("launch an application under test").option("-c, --config [path]","path and name of config file").option("--save [filename]","creates config file using current settings").option("--message-server-url <url>","url of the message server. eg: ws://host:port").option("-a, --agents <ids>","comma delimited list of agent ids").option("--app <url/uri/identifier>","the url/uri/identifier of a testable app").action(function(a){UpdateCmdArgs(a),cmd=require("./libs/executionCmds.js").launchApp}),cli.command("close").description("close an application under test").option("-c, --config [path]","path and name of config file").option("--save [filename]","creates config file using current settings").option("--message-server-url <url>","url of the message server. eg: ws://host:port").option("-a, --agents <ids>","comma delimited list of agent ids").action(function(a){UpdateCmdArgs(a),cmd=require("./libs/executionCmds.js").closeApp}),cli.command("getelements").description("gets the visible elements of the application").option("-c, --config [path]","path and name of config file").option("--save [filename]","creates config file using current settings").option("--message-server-url <url>","url of the message server. eg: ws://host:port").option("-a, --agents <ids>","comma delimited list of agent ids").action(function(a){UpdateCmdArgs(a),cmd=require("./libs/executionCmds.js").getElements}),cli.command("highlight").description("highlights an element").option("-c, --config [path]","path and name of config file").option("--save [filename]","creates config file using current settings").option("--message-server-url <url>","url of the message server. eg: ws://host:port").option("-a, --agents <ids>","comma delimited list of agent ids").option("--identifier <identifier>","identifier of the element to highlight").option("--query <query>","query of the element to highlight").option("--cancel","stops highlighting if the highlighter is displayed").action(function(a){UpdateCmdArgs(a),cmd=require("./libs/executionCmds.js").highlightElement}),cli._name="tmtest",cli.parse(process.argv),0===cli.args.length&&(cmd=require("./libs/executionCmds.js").default),cmd?(argsMng.load(cmdArgs,cli),argsMng.save(cmdArgs,cli),argsMng.applyDefaults(cmdArgs,cli),ValidateCmdArgs(cmdArgs)&&cmd.execute(cmdArgs)):console.log('Invalid command "'+cli.args.join(" ")+'"');